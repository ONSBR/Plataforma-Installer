version: "2"

services:
  reverse-proxy:
    image: traefik:maroilles # The official Traefik docker image
    command: --api --docker # Enables the web UI and tells Tr√¶fik to listen to docker
    container_name: proxy
    ports:
      - 80:80     # The HTTP port
      - 8089:8080 # The Web UI (enabled by --api)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  postgres:
    image: postgres:11
    container_name: "postgres"
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=platform_domain_schema
  mongo:
    image: mongo:latest
    container_name: "mongo"
    ports:
      - 27017:27017
  domain_schema:
    build:
      context: ./Dockerfiles
      dockerfile: DSchema
    container_name: "schema"
    ports:
      - 9092:80
    depends_on:
      - "postgres"
  domain_schema_worker:
    build:
      context: ./Dockerfiles
      dockerfile: DWorker
    container_name: "schema_worker"
    depends_on:
      - "rabbitmq"
  domain_reader:
    build:
      context: ./Dockerfiles
      dockerfile: DReader
    container_name: "reader"
    ports:
      - 9093:80
    depends_on:
      - "rabbitmq"
      - "postgres"
      - "domain_schema"
    environment:
      - SCHEMA_URI=http://schema/api/v1/entitymap/
      - POSTGRES_HOST=postgres
  domain_reader_worker:
    build:
      context: ./Dockerfiles
      dockerfile: DRWorker
    container_name: "reader_worker"
    depends_on:
      - "rabbitmq"
  process_memory:
    build:
      context: ./Dockerfiles
      dockerfile: DProcessMemory
    container_name: "process_memory"
    ports:
      - 9091:9091
    environment:
      - MONGO_HOST=mongo
      - MONGO_OPTIONS=/?ssl=true&ssl_ca_certs=rds-combined-ca-bundle.pem&replicaSet=rs0
    labels:
      - traefik.backend=process_memory
      - "traefik.process_memory.frontend.rule=PathPrefixStrip: /process_memory"
      - traefik.docker.network=plataforma_network
      - traefik.port=9091
  apicore:
    build:
      context: ./Dockerfiles
      dockerfile: DApiCore
    container_name: "apicore"
    ports:
      - 9110:9110
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - PROCESS_MEMORY_PORT=9091
      - COREAPI_URL=apicore
      - COREAPI_PORT=9110
    depends_on:
      - "postgres"
  event_manager:
    build:
      context: ./Dockerfiles
      dockerfile: DEventManager
    container_name: "event_manager"
    ports:
      - 8081:8081
    environment:
      - EXECUTOR_HOST=executor
      - REPLAY_HOST=replay
      - PROCESS_MEMORY_HOST=process_memory
      - ROUTER_HOST=http_router
      - INFLUX_HOST=influxdb
      - APICORE_HOST=apicore
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_API_PORT=15672
      - RABBITMQ_AMQP_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
      - MONGO_HOST=mongo:27017
      - MAESTRO_HOST=maestro
    depends_on:
      - "rabbitmq"
      - "postgres"
  maestro:
    build:
      context: ./Dockerfiles
      dockerfile: DMaestro
    container_name: "maestro"
    ports:
      - 6971:6971
    environment:
      - EXECUTOR_HOST=executor
      - DISCOVERY_HOST=discovery
      - PROCESS_MEMORY_HOST=process_memory
      - ROUTER_HOST=http_router
      - INFLUX_HOST=influxdb
      - APICORE_HOST=apicore
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_API_PORT=15672
      - RABBITMQ_AMQP_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
      - MONGO_HOST=mongo:27017
      - EVENT_MANAGER_HOST=event_manager
      - WAUTO_REPROCESSING_ec498841-59e5-47fd-8075-136d79155705=True
    depends_on:
      - "event_manager"
      - "apicore"
      - "discovery"
      - "rabbitmq"
      - "process_memory"
  discovery:
    build:
      context: ./Dockerfiles
      dockerfile: DDiscovery
    container_name: "discovery"
    ports:
      - 8090:8090
    environment:
      - PROCESS_MEMORY_HOST=process_memory
      - APICORE_HOST=apicore
      - POSTGRES_HOST=postgres
    depends_on:
      - "apicore"
      - "process_memory"
      - "rabbitmq"
      - "postgres"
  ui:
    build:
      context: ./Dockerfiles
      dockerfile: DFront
    container_name: "ui"
    ports:
      - 8384:8384
    environment:
      - PROCESS_MEMORY_HOST=process_memory
      - REPLAY_HOST=replay
      - APICORE_HOST=apicore
      - EVENT_MANAGER_HOST=event_manager
      - MAESTRO_HOST=maestro
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_API_PORT=15672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
    labels:
      - traefik.backend=ui
      - "traefik.ui.frontend.rule=PathPrefixStrip: /ui"
      - traefik.docker.network=plataforma_network
      - traefik.port=8384
    depends_on:
      - "apicore"
      - "process_memory"
      - "event_manager"
      - "rabbitmq"
      - "postgres"
  executor:
    build:
      context: ./Dockerfiles
      dockerfile: DExecutor
    container_name: "executor"
    environment:
      - PROCESS_MEMORY_URL=process_memory
      - PROCESS_MEMORY_PORT=9091
      - COREAPI_URL=apicore
      - COREAPI_PORT=9110
      - EVENT_MANAGER_URL=event_manager
      - EVENT_MANAGER_PORT=8081
      - EXEC=gunicorn -b :8000 runner.api:runner_api
    ports:
      - 8000:8000
  authprovider:
    build:
      context: ./Dockerfiles
      dockerfile: DAuthProvider
    container_name: "authprovider"
    environment:
      - PORT=8085
    ports:
      - 8085:8085
    labels:
      - traefik.backend=authprovider
      - "traefik.authprovider.frontend.rule=PathPrefixStrip: /authprovider"
      - traefik.docker.network=plataforma_network
      - traefik.port=8085
    extra_hosts:
      poptst.ons.org.br: 10.107.26.2      
  celery:
    build:
      context: ./Dockerfiles
      dockerfile: DCelery
    container_name: "celery"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DEBUG_MODE=True
      - REMOVE_CONTAINER_AFTER_EXECUTION=False
      - PROCESS_MEMORY_URL=process_memory
      - PROCESS_MEMORY_PORT=9091
      - COREAPI_URL=apicore
      - COREAPI_PORT=9110
      - EVENT_MANAGER_URL=event_manager
      - EVENT_MANAGER_PORT=8081
      - RABBITMQ_URL=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
      - C_FORCE_ROOT=true
    depends_on:
      - "event_manager"
      - "rabbitmq"
      - "postgres"
  registry:
    image: "registry:2"
    container_name: "registry"
    ports:
      - 5000:5000
  influxdb:
    image: influxdb:alpine
    container_name: "influxdb"
    ports:
      - "8086:8086"
  rabbitmq:
    image:  rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - 15672:15672
      - 5672:5672
    labels:
      - traefik.backend=rabbitmq
      - "traefik.rabbitmq.frontend.rule=PathPrefixStrip: /rabbitmq"
      - traefik.docker.network=plataforma_network
      - traefik.port=15672
  logspout:
    build:
      context: ./Dockerfiles
      dockerfile: DLogspout
    container_name: "logspout"
    labels:
      - traefik.backend=logspout
      - "traefik.logspout.frontend.rule=PathPrefixStrip: /logspout"
      - traefik.docker.network=plataforma_network
      - traefik.port=80
    ports:
      - 8400:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/plataforma_logs:/logs
  portainer:
      image: "portainer/portainer"
      container_name: "portainer"
      command: --no-auth
      ports:
        - 9000:9000
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      labels:
        - traefik.backend=portainer
        - "traefik.portainer.frontend.rule=PathPrefixStrip: /portainer"
        - traefik.docker.network=plataforma_network
        - traefik.port=9000
networks:
  default:
    external:
      name: plataforma_network
volumes:
  pgdata:
